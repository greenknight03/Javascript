1. 프로그래밍은 누구나 할 수 있나요? Yes
2. (돈을 받고 일을 하는) 프로그래머는 누구나 될 수 있나요? NO
3. 프로그래밍은 쉽나요? NO
4. HTML, CSS(90%), JS(절반)
5. 꾸준히하면 익숙해지죠. 지금은 성장하는 단계라서, ComfortZone을 벗어났기 때문에, 매우 아픈 시간이 될것입니다.
그러나 매우 아픈시간은 매일 지속되지 않습니다.
6. 쉬운 내용만을 할 수는 없습니다.
7. 같이 하고 있으니 공감할 수 있고, 속도 조절이나 부연설명도 가능하죠. 대안을 만들어 낼 수도 있고요.
결론은 같이 이겨내보자는 것입니다.
시간이 필요할 뿐! 니까짓게....! 주겨!!!!!!


## 변수(타입)
- Array(배열) 
  * 형태 : ['하나', '둘', '셋'], [100, 200, 300],
  * 호출 : 변수명, 변수명[0], 변수명[0][0] (변수명[index])
- String(문자열)
  * 형태 : 'abcde', "abcde", abcde
  * 호출 : 변수명, 변수명[0] (변수명[index])
- Number(숫자)
  * 형태 : 10, 10.123
  * 호출 : 변수명
- Boolean(논리값)
  * 형태 : true, false
  * 호출 : 변수명
- Object(객체)
  * 형태 : {
              "지역이름": "전국",
              "확진자수": 24889,
              "격리해제수": 23030,
              "사망자수": 438,
              "십만명당발생율": 48.0
            }
  * 호출 : 변수명, 변수명.지역이름, 변수명['지역이름'] (변수명.key, 변수명[key])
- undefine : undefind
- null : object
- NaN : number

## 산술연산(+, -, /, *, , %)
## 논리연산(!, &&, ||)
## 비교연산(==, !=, >, >=, <, <=, ===, !==)
## 조건문(if, else if, else, switch)
## 반복문(for, for in, for of, while, do while, forEach, break, continue)
for (let i = 0; i < 10; i++) {
    console.log(i)
}

let a = [10, 20, 30, 40];
for (let i of a) {
    console.log(i);
}

let a = [10, 20, 30, 40];
for (let i in a) {
    console.log(i);
}

let x = 0;
while (x < 10) {
    console.log(x);
    x++;
}

let x = 0;
do {
    console.log(x);
    x++;
} while (x < 10)

let a = [10, 20, 30, 40];
a.forEach(e => console.log(e2));

for (let i = 0; i < 10; i++) {
    if (i == 5) {
        break;
    }
}

for (let i = 0; i < 10; i++) {
    if (i == 5) break;
    console.log(i);
}

for (let i = 0; i < 10; i++) {
    if (i == 5) break;
    console.log(i);
}

for (let i = 0; i < 10; i++) {
    if (i == 5) continue;
    console.log(i);
}

## 함수
- 함수
// 여기서 x, y를 보통 한국에서는 인자
// 전달인자(아규먼트, argument) : 3, 5
// 매개변수(파라미터, parameter) : x, y
function add(x, y){
    return x + y;
}

add(3, 5)

- 콜백함수
function add(x, y) {
    return x + y;
}

function mul(x, y) {
    return x * y;
}

function cal(a, b){
    return a(10, 10) + b(10, 10);
}

cal(add, mul);
- 화살표함수
function add(x, y) {
    return x + y
}

let addArrow = (x, y) => x + y;
- 익명함수 아님
// 기명 함수
let aa = function sum(x, y) {
    return x + y
}

// 익명 함수인것 같지만 바뀜
let bb = function(x, y) {
    return x + y
}
// ES5에서는 빈 문자열이었는데 ES6에서 name 값을 가지는 것으로 바뀌었습니다.
let cc = (x, y) => x + y;

## 선언
let x : 변수로 사용하세요.
var x (전역에서 사용할 변수값, 실무에서 되도록 사용X)
const x (변하지 않는 상수값)

## 전개표현식 사용
function add(...x){
    return x;
}

add(1, 2, 3, 4, 5)

## 블록스코프
hojun이 not defined 되었다고 나옵니다.
if (true){
    let hojun = 100;
}

console.log(hojun);
// 리터럴

## 정규표현식



prompt('hello?')
'hi'
comfirm()
VM188:1 Uncaught ReferenceError: comfirm is not defined
    at <anonymous>:1:1
(익명) @ VM188:1
confirm('hi')
true
alert('hello')
undefined






딥다이브 p.52에 리터럴 자세히 나와있어서 같이 공유드립니다.😆 
```
리터럴: 사람들이 이해할수있는 문자 (아라비아 숫자, 알파벳, 한글 등) 
            또는 미리 약속된 기호(“”, [], {},//)로 표기한 코드다

자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 
생성한다.
 즉, 리터럴은 값을 생성하기 위해 미리 약속한 표기법이라고 할 수 있다.
리터럴을 사용하면 다음과 같이 다양한 종류의 값을 생성할 수 있다.

Ex) 
문자열 리터럴 “hello”
객체    리터럴 {name: “Lee”, address: “seoul”}
배열    리터럴 [1,2,3]



간단한 마크다운 문법입니당 

1. 제목 : #
2. 비 순서형 목록 : *
3. 이텔릭 : * *
4. 볼드 :  
5. 순서형 목록 : 1.
6. 인용문 : >
7. 링크 : Link
8. 인라인 코드 : `
9. 코드 뭉치 : \`` ``` 
10. Todo 리스트 : - [ ]
11. 각종 이모지 : https://gist.github.com/roachhd/1f029bd4b50b8a524f3c 






// 평균 내기 ~~ 구구단 식이랑 같이 걍 외워버랴!!!!!!

let array = [10, 20, 30, 40, 50];
let result = 0;

for (let value of array) {
  result += value;
}
console.log(result/array.length);

// for : in은 인덱스값 출력 / of는 값을 출력


// 1에서 100까지 합하기 
let i = 1;
let sum = 0; 

while (i <= 100) {
    if (i % 2 == 0) {
        sum += i;
    }
    i++;
}

console.log(sum);






// for문 구구단
for (var i = 2; i < 10; i++) {
  for (var j = 1; j < 10; j++) {
    document.write(`${i} X ${j} = ${i*j} <br>`);
  }
}



// while문 구구단 
let i = 2;
let j = 1;

while (i < 10) {
  while (j < 10) {
    console.log(`${i} X ${j} = ${i*j}`);
    j++;
  }
  i++;
  j = 1;
}

// j = 1; 초기화 

// 저희 구구단을 외울 때
// 2*1=2
// 2*2=4
// 2*3=6 
// ...

// 이런식으로 뒤에 곱하는 값이 1씩 커지잖아요? 그리고 한 단이 끝나면 다음 단으로 넘어가구요.

// 여기서 i=2, j=1이기 때문에 j++를 통해 j가 1씩 증가하면서 i와 곱해지고 9까지 다 곱하면 이제는 다음 단으로 넘어가야겠죠? 
// 다음 단으로 넘어갈 때는 i++를 통해 i에 값이 1 증가하게 되면서 3이 되고, 이때 j가 그대로 9라면 39가 되기 때문에 j=1으로 초기화하는 것이에요.
// 그럼 31=3으로 3단이 시작됩니다. ㅎㅎ
// 반복문 진행과정을 손으로 쭉 써보시면 이해가 되실 거에요! i가 2일때부터 9가 될 때까지요! 



//j=1를 밑에서 왜 한번더 적었는지 -- 두번째 while문을 돌면서 j가 9가 되어서 다시 1로 돌려주는거에요


// 구구단 4단까지 
let i = 2;
let j = 1;
while (i < 10) {
  if (i == 5){
    break;
  }
  while (j < 10) {
    console.log(`${i} X ${j} = ${i*j}`);
    j++;
  }
  i++;
  j = 1;
}

let i = 2;
let j = 1;
while (i < 10) {
  while (j < 10) {
    console.log(`${i} X ${j} = ${i*j}`);
    if (j == 5){
        break;
    }
    j++;
  }
  i++;
  j = 1;
}


// console.dir() 이랑 console.log()  차이가 
// console.log는 요소를 HTML과 같은 트리 구조로 출력합니다. console.dir은 요소를 JSON과 같은 트리 구조로 출력합니다. 만 있는건가요~~~?
// console.log로 함수를 출력하면 함수의 코드가 출력되고,
// console.dir로 함수를 출력하면 함수의 속성이 출력된다. 

// console.log 와 retrun의 차이는
// 입력만 하는 상황 / 출력까지 되는 상황




let 전교점수 = [
           // 1반
           [[10, 20, 30, 40, 50],
           [20, 30, 40, 50, 60]],
           // 2반
           [[10, 20, 30, 40, 50],
           [20, 30, 40, 50, 60]],
         ];

1반 평균구하기 
(전교점수[0][0][0] + 전교점수[0][0][1] + 전교점수[0][0][2] + 전교점수[0][0][3] + 전교점수[0][0][4]) / 5
30
let 총합 = 0;
for(let i=0; i < 5; i++){
    총합 += 전교점수[0][0][i];
}
총합
150
(전교점수[0][1][0] + 전교점수[0][1][1] + 전교점수[0][1][2] + 전교점수[0][1][3] + 전교점수[0][1][4]) / 5
40
let 총합2 = 0;
for(let i=0; i < 5; i++){
    총합2 += 전교점수[0][1][i];
}
총합2
200


전화번호 

let 전화번호 = '010.1000,1000'
undefined
// 010-1000-1000
undefined
전화번호.split('.')
(2) ['010', '1000,1000']
전화번호.split('.').join('-')
'010-1000,1000'
let 전화번호 = '010.1000.1000'
undefined
전화번호.split('.')
(3) ['010', '1000', '1000']
전화번호.split('.').join('-')
'010-1000-1000'




let 과일 = ['복숭아', '딸기', '바나나'];
let 제주과일 = ['귤', '한라봉', '천혜향'];
undefined
과일.concat(제주과일);
(6) ['복숭아', '딸기', '바나나', '귤', '한라봉', '천혜향']
제주과일.concat(과일);
(6) ['귤', '한라봉', '천혜향', '복숭아', '딸기', '바나나']
과일
(3) ['복숭아', '딸기', '바나나']
제주과일
(3) ['귤', '한라봉', '천혜향']
과일.sort()
(3) ['딸기', '바나나', '복숭아']
let data = [ 10, 20, 30, 11, 22, 25, 111];
undefined
data.sort()
(7) [10, 11, 111, 20, 22, 25, 30]
data
(7) [10, 11, 111, 20, 22, 25, 30]
// 사전식정렬
undefined
// sortFunction는 요소 순서를 결정하는 데 사용되는 함수의 이름이다. 생략하면 오름차순, ASCII 문자 순서로 정렬된다.
// ㄱ ㄴ ㄷ ㄹ ~  1 2 3 4
// data.sort((a, b) => a - b) // 오름차순
data.sort((a, b) => b - a) // 내림차순



// reverse 
let data = [ 10, 20, 30, 11, 22, 25, 111];
undefined
data.reverse()
(7) [111, 25, 22, 11, 30, 20, 10]
data
(7) [111, 25, 22, 11, 30, 20, 10]



배열 : [값1, 값2, 값3]
-> 인덱스 [0], [1], [2] 로 값 접근

오브젝트 : [(키-값)1, (키-값)2, (키-값)3]
-> 키로 값 접근 .key_name



// 함수
undefined
// 1. 재사용성
// 2. 아키택처 파악
// 3. 유지보수
undefined
function 땅다지기(){} // 정의
undefined
function 시멘트작업(){}
undefined
function 철근(){}
undefined
function 벽돌(){}
undefined
function 지붕(){}
undefined

땅다지기()  // 호출
시멘트작업()
철근()
벽돌()
지붕()



let k = 10;
function viewk(){
    console.log(k);
}
function changek(){
    k += 20;
    console.log(k)
}
viewk()
changek()
viewk()
VM7368:3 10
VM7368:7 30
VM7368:3 30

let k = 10;
function viewk(){
    console.log(k);
}
function changek(){
    k += 10;
    console.log(k)
}
viewk()
changek()
viewk()
VM7391:3 10
VM7391:7 20
VM7391:3 20


파라미터 매개변수 -  함수와 메서드 입력 변수(Variable)명
아규먼트 전달인자, 인자 - 함수와 메서드의 입력 값(value) 
파라미터 : a, b 변수명
아규먼트 : 10, 20 값
파선아실 -  파라미터 선언 아규먼트 실행 


⚠️  8bit == 1byte
⚠️ 1024byte == 1KB

⚠️ 1024KB == 1MB

⚠️ 1024MB == 1GB

⚠️ 1024GB == 1TB
갈매기털빼



let 치킨박스 = 0 // 빈 박스 선언

// 기름통 함수에 치킨넣기
function 기름통(치킨) {

    치킨 튀기기...

    return 치킨;
}

// 치킨박스에 튀겨진 치킨 할당
치킨박스 = 치킨튀기는함수(치킨);